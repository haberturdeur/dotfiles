set-option global tabstop 4
set-option global indentwidth 4

declare-option str explorer_path "."
declare-option str workspace_root "."

eval %sh{ kak-tree-sitter --with-text-objects -dks --init $kak_session}

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "andreyorst/powerline.kak" defer kakoune-themes %{
  powerline-theme pastel
} defer powerline %{
  powerline-format global "git lsp bufname filetype mode_info lsp line_column position"
} config %{
  powerline-start
}

plug "occivink/kakoune-sudo-write" %{
}

evaluate-commands %sh{kak-popup init}

plug "gustavo-hms/luar" %{
  require-module luar
}

plug "crizan/kak-rainbower" %{
    evaluate-commands %sh{
        if [ ! -f "$kak_config/plugins/kak-rainbower/rc/rainbower" ]; then
            echo "rainbower missing, compiling" 1>&2
            echo "rainbower-compile"
        fi
    }
    set-option global rainbow_mode 0
    set-option global rainbow_colors rgb:ffd700 rgb:da70d6 rgb:179fff
}

hook global WinSetOption filetype=(python|javascript|typescript|c|cpp|latex|haskell) %{
    eval %sh{kak-lsp}
    set global lsp_debug true
    lsp-enable
    set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
    echo -debug "Enabling LSP for filtetype %opt{filetype}"
    hook -always global KakEnd .* lsp-exit
}

hook global WinSetOption filetype=(haskell) %{
    lsp-inlay-hints-enable buffer
    lsp-inlay-code-lenses-enable buffer
}

hook global WinSetOption filetype=.* %{
    set-option window explorer_path %sh{dirname "$kak_buffile"}
    echo %opt{explorer_path}
}

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    hook global BufOpenFile .* expandtab
    hook global BufNewFile  .* expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
}

# tabs for autocomplete
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <c-tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

hook global RawKey <mouse:press:middle:.*> %{ exec !xclip<space>-o<ret> }

map global normal <c-P> '!xclip -o -selection clipboard<ret>'
map global normal <c-p> '<a-!>xsel --output --clipboard<ret>'
map global normal <c-R> '|xsel --output --clipboard<ret>'

hook global NormalKey y|d|c %{
    nop %sh{
        printf %s "$kak_main_reg_dquote" | xclip -in -selection clipboard >&- 2>&-
    }
}

# Define custom faces to keep them organized
set-face global PrimaryCursorNormal +r
set-face global PrimaryCursorInsert rgb:008800+r
set-face global PrimaryCursor PrimaryCursorNormal

# EOL cursor
set-face global PrimaryCursorEolNormal default,bright-cyan
set-face global PrimaryCursorEolInsert PrimaryCursorInsert
set-face global PrimaryCursorEol PrimaryCursorEolNormal

hook global ModeChange (push|pop):.*insert %{
    set-face window PrimaryCursor PrimaryCursorInsert
    set-face window PrimaryCursorEol PrimaryCursorEolInsert
}

hook global ModeChange (push|pop):insert:.* %{
    set-face window PrimaryCursor PrimaryCursorNormal
    set-face window PrimaryCursorEol PrimaryCursorEolNormal
}

def toggle-rg -docstring "Open interactive ripgrep in a popup." %{
    popup --title "Ripgrep Search" --kak-script %{
        evaluate-commands %sh{
            selected_output="$kak_opt_popup_output"
            if [ -n "$selected_output" ]; then
                IFS=':' read -r path line char text <<< "$selected_output"
                if [ -n "$path" ] && [ -n "$line" ]; then
                    printf 'edit -existing "%s" %s %s\n' "$path" "$line" "$char"
                else
                    printf 'echo -markup "{Warning}Invalid output format: %s Operation aborted."\n' "$selected_output"
                fi
            else
                printf 'echo -markup "{Warning}No file selected. Operation aborted."\n'
            fi
        }
    } -- zsh -i -c irg
}

# shortcut
alias global rg toggle-rg

def toggle-nnn -docstring "Open file explorer in a popup." %{
    popup --title open --kak-script %{
        evaluate-commands %sh{
            selected_file="$kak_opt_popup_output"
            if [ -n "$selected_file" ]; then
                parent_dir=$(dirname "$selected_file")
                printf 'set-option global explorer_path "%s"\n' "$parent_dir"
                printf 'edit "%s"\n' "$selected_file"
            else
                printf 'echo -markup "{Warning}No file selected. Operation aborted."\n'
            fi
        }
    } -- nnn -p - %opt{explorer_path}
}

alias global E toggle-nnn

# enable flag-lines hl for git diff
hook global WinCreate .* %{
    add-highlighter window/git-diff flag-lines Default git_diff_flags

}
# trigger update diff if inside git dir
hook global BufOpenFile .* %{
    evaluate-commands -draft %sh{
        cd $(dirname "$kak_buffile")
        if [ $(git rev-parse --git-dir 2>/dev/null) ]; then
            for hook in WinCreate BufReload BufWritePost; do
                printf "hook buffer -group git-update-diff %s .* 'git update-diff'\n" "$hook"
            done
        fi
    }
}

define-command my-custom-lsp-cmd -docstring "Call a custom LSP method" %{
    lsp-send myExtension/doSomething param1 param2
}

add-highlighter -override global/ number-lines -hlcursor -separator " "
define-command -override tree-sitter-user-after-highlighter %{
    add-highlighter -override buffer/ number-lines -hlcursor -separator " "
    add-highlighter -override buffer/show-matching show-matching

    rainbow-enable-window
    colorscheme one-dark-ts
}

colorscheme one-dark-ts
