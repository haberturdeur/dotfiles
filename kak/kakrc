set-option global tabstop 4
set-option global indentwidth 4

eval %sh{ kak-tree-sitter -dks --init $kak_session }

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# fzf
plug "andreyorst/fzf.kak" config %{
  require-module fzf
  require-module fzf-grep
  require-module fzf-file
} defer fzf %{
  set-option global fzf_highlight_command "lat -r {}"
} defer fzf-file %{
  set-option global fzf_file_command "fd . --no-ignore-vcs"
} defer fzf-grep %{
  set-option global fzf_grep_command "fd"
}

plug "andreyorst/powerline.kak" defer kakoune-themes %{
  powerline-theme pastel
} defer powerline %{
  powerline-format global "git lsp bufname filetype mode_info lsp line_column position"
} config %{
  powerline-start
}

evaluate-commands %sh{kak-popup init}

plug "gustavo-hms/luar" %{
  require-module luar
}

plug "kakounedotcom/prelude.kak" %{
	require-module prelude
}

plug "kakounedotcom/connect.kak" %{
    require-module connect
}

plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
}

hook global WinSetOption filetype=(python|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

plug 'https://gitlab.com/kstr0k/mru-files.kak.git' %{
  # optional customization: set these *before* plugin loads
  set global mru_files_history %sh{echo "$HOME/.local/share/kak/mru.txt"}
  set global kakhist_file %sh{echo "$HOME/.local/share/kak/kakhist.txt"}
} demand mru-files %{  # %{} needed even if empty
  # suggested mappings: *after* plugin loads
  # think "go alt[ernate]-f[iles]"
  map global goto <a-f> '<esc>: mru-files ' -docstring 'mru-files'
  map global goto <a-F> '<esc>: mru-files-related<ret>' -docstring 'mru-files-related'
}

require-module kakhist; kakhist-init

map global goto ':' '<esc>: kakhist-buf-show<ret>' \
  -docstring 'show command history'

# tabs for autocomplete
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

hook global RawKey <mouse:press:middle:.*> %{ exec !xclip<space>-o<ret> }

map global normal P '!xclip -o -selection clipboard<ret>'
map global normal p '<a-!>xsel --output --clipboard<ret>'
map global normal R '|xsel --output --clipboard<ret>'
map -docstring "open fzf" global user f ": fzf-mode<ret>"

# Explore files with nnn
# alias global explore-files nnn

hook global NormalKey y|d|c %{
    nop %sh{
        encoded=$(printf %s "$kak_main_reg_dquote" | base64 | tr -d '\n')
        printf "\e]52;;%s\e\\" "$encoded" >/dev/tty
    }
}

# Define custom faces to keep them organized
set-face global PrimaryCursorNormal +r
set-face global PrimaryCursorInsert rgb:008800+r
set-face global PrimaryCursor PrimaryCursorNormal

# EOL cursor
set-face global PrimaryCursorEolNormal default,bright-cyan
set-face global PrimaryCursorEolInsert PrimaryCursorInsert
set-face global PrimaryCursorEol PrimaryCursorEolNormal

hook global ModeChange (push|pop):.*insert %{
	set-face window PrimaryCursor PrimaryCursorInsert
	set-face window PrimaryCursorEol PrimaryCursorEolInsert
}

hook global ModeChange (push|pop):insert:.* %{
	set-face window PrimaryCursor PrimaryCursorNormal
	set-face window PrimaryCursorEol PrimaryCursorEolNormal
}

def toggle-nnn -docstring "open explorer in popup" %{
    popup --title open --kak-script %{edit %opt{popup_output}} -- nnn -p -
}

alias global E toggle-nnn

hook global WinCreate .* %{ git show-diff }


add-highlighter -override global/ number-lines -hlcursor -separator " "
define-command -override tree-sitter-user-after-highlighter %{
    add-highlighter -override buffer/ number-lines -hlcursor -separator " "
    add-highlighter -override buffer/show-matching show-matching
}

colorscheme one-dark-ts
